# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
# 
# Copyright (C) 2020, Arne Wendt
#


# insmod chain

source ${root_dir}drive_loader.cfg


function get_efi_bin {

    unset __efibin

    # is windows
    if [ -s "${1}/efi/Microsoft/Boot/bootmgfw.efi" ]; then
        set __efibin="/efi/Microsoft/Boot/bootmgfw.efi"
    fi

    # find grub or syslinux
    if [ -z "${__efibin}" ]; then
        for __ebdir in "${1}/efi/"*; do
            if [ -s "${__ebdir}/grubx64.efi" ]; then
                get_path_wo_drv "${__ebdir}/grubx64.efi" __efibin
                break
            elif [ -s "${__ebdir}/grubx64.efi" ]; then
                get_path_wo_drv "${__ebdir}/grubx64.efi" __efibin
                break
            fi
            for __ebsubdir in "${__ebdir}"*; do
                if [ -s "${__ebsubdir}/grubx64.efi" ]; then
                    get_path_wo_drv "${__ebsubdir}/grubx64.efi" __efibin
                    break
                elif [ -s "${__ebsubdir}/grubx64.efi" ]; then
                    get_path_wo_drv "${__ebsubdir}/grubx64.efi" __efibin
                    break
                fi                
            done
            if [ -n "${__efibin}" ]; then break; fi
        done
    fi


    # fallbacks
    if [ -z "${__efibin}" ]; then
        if [ -s "${1}/efi/boot/bootx64.efi" ]; then
            set __efibin="/efi/boot/bootx64.efi"
        elif [ -s "${1}/efi/Boot/bootx64.efi" ]; then
            set __efibin="/efi/Boot/bootx64.efi"
        elif [ -s "${1}/efi/boot/fbx64.efi" ]; then
            set __efibin="/efi/boot/fbx64.efi"
        elif [ -s "${1}/efi/boot/fallback.efi" ]; then
            set __efibin="/efi/boot/fallback.efi"
        else
            false
            return
        fi
    fi

    eval "set ${2}"'="${__efibin}"'
    unset __efibin

    true
    return
}


function chain_drive {
    if [ $# -ne 1 ]; then
        false
        return
    fi

    regexp --set 1:__drivename '\(?([^,\(\)]*)' "${1}"
    set __drive="(${__drivename})"

    if [ "${grub_platform}" == "efi" ]; then
        unset __efi
        get_valid_parts "${__drivename}" __parts
        for __part in ${__parts}; do
            if [ -d "${__part}/efi/" ]; then
                if get_efi_bin "${__part}" __efi; then
                    set root="${__part}"
                    break
                fi
            fi
        done

        if [ -z __efi ]; then
            clear
            echo "could not find any efi binary and we are booting in efi mode!"
            echo "failed to chainload disk! [ESC] for mainmenu"
            sleep -i 9999
            configfile "${root_dir}grub.cfg"
            return
        fi

        unset __part
        unset __parts

        chainloader "${__efi}"

    else
        drivemap "${__drive}" "(hd0)"
        chainloader "${__drive}+1"
    fi

    unset __drive
    unset __drivename

    boot
}

# make_std_boot "drive" "display name"
function __make_std_boot {    
    set __parts=""
    get_valid_parts "${1}" __parts
    unset __puuid

    for __part in ${__parts}; do
        if probe -s __puuid -u "${__part}"; then
            break
        fi
    done

    if [ -z "${__puuid}"]; then
        echo "failed to set as default option!"
        echo "could not get uuid for any partition!"
        echo "[ESC] to continue..."
        sleep -i 9999
        
        false
        return
    fi

    set __stduuid="${__puuid}"
    set __stdname="${2}"
    set timeout="${__dt}"
    set default="__chstd"
    save_env __stduuid
    save_env __stdname
    save_env timeout
    save_env default
    load_env
}

function unset_timeout {
    export timeout
    export default
    set timeout=-1
    unset default
    #save_env timeout
    #save_env default
    #load_env
}

function get_std_boot {
    if [ -n "${__stduuid}" ]; then
        if search -s __part -u "${__stduuid}"; then
            regexp --set 1:__drive '(.*),.*' "${__part}"
                if [ -z "${__stdname}" ]; then
                    probe -s __stdname -l "(${__part})"
                    append_str_to "${__drive}" ___stdname " : "
                fi

                menuentry "boot default: ${__stdname}" "${__drive}" --id __chstd {
                    chain_drive "${2}"
                }

                menuentry "-----------------------------" { echo " " }

        else
            unset_timeout
        fi
    else
        unset_timeout
    fi
}

# show modules menu
function __module_menu {
    menuentry "boot: ${__chain_title}" "${__chain_drive}" {
        chain_drive "${2}"
    }

    menuentry "make default and boot" "${__chain_drive}" "${__chain_title}" {
        __make_std_boot "${2}" "${3}"
        chain_drive "${2}"
    }

    menuentry "-----------------------------" { echo " " }

    menuentry 'back - press [ESC]' {
        export __wrapcfgfile
        set __wrapcfgfile="drive_loader.cfg"
        configfile "${root_dir}module_menu_wrapper.cfg"
    }

    menuentry 'main menu' {
        configfile "${root_dir}grub.cfg"
    }

    menuentry 'exit' {
        exit
    }

    unset __chain_title
    unset __chain_drive
}
