# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
# 
# Copyright (C) 2020, Arne Wendt
#


source ${root_dir}functions.cfg


# load_iso "isofile" ["loopdev"=(loop)]
function load_iso {
    if [ $# -lt 1 ]; then
        false
        return
    fi

    if [ -n "${2}"]; then
        regexp --set 1:__liloopdev '\(?([^\(\)]*)\)?' "${2}"
        set __liloopdev="${2}"
    else
        set __liloopdev="loop"
    fi

    if [ -d "${__liloopdev}/" ]; then
        loopback -d "${__liloopdev}"
    fi

    loopback "${__liloopdev}" "${1}"
    echo "loaded iso; loopback returned $?"
    unset __liloopdev

    true
    return
}

# iso_loop_label "loopdev" "return variable name"
function iso_loop_label {
    if [ $# -lt 2 ]; then
        false
        return
    fi

    probe --set ${2} -l "(${1})"
    escape_spaces ${2}
}

# iso_id_by_name "isofile/-filename" "return variable name"
function iso_id_by_name {
    if [ $# -lt 1 ]; then
        false
        return
    fi

    # get filename
    regexp --set 1:__isofname '([^/]*)$' "${1}"


    unset __iibndist

    # Ubuntu
    if regexp '(U|u)+.?(B|u)+.?(N|n)+.?(T|t)+.?(U|u)' "${__isofname}"; then
        set __iibndist="ubuntu"

    # CentOS
    elif regexp '(C|c)+.?(E|e)+.?(N|n)+.?(T|t)' "${__isofname}"; then
        set __iibndist="centos"

    # Fedora CoreOS
    elif regexp '(C|c)+.?(O|o)+.?(R|r)+.?(E|e)+.*(O|o)+.?(S|s)' "${__isofname}"; then
        set __iibndist="fcos"

    # Fedora
    elif regexp '(F|f)+.?(E|e)+.?(D|d)+.?(O|o)+.?(R|r)+.?(A|a)' "${__isofname}"; then
        set __iibndist="fedora"

    # Debian
    elif regexp '(D|d)+.?(E|e)+.?(B|b)+.?(I|i)+.?(A|a)+.?(N|n)' "${__isofname}"; then
        set __iibndist="debian"

    # Alpine
    elif regexp '(A|a)+.?(L|l)+.?(P|p)+.?(I|i)+.?(N|n)+.?(E|e)' "${__isofname}"; then
        set __iibndist="alpine"

    # Arch
    elif regexp '(A|a)+.?(R|r)+.?(C|c)+.?(H|h)' "${__isofname}"; then
        set __iibndist="arch"

    # ESXi
    elif regexp '((V|v)+.?(M|m)+.*(W|w)+.?(A|a)+.?(R|r)+.?(E|e)|(E|e)+.?(S|s)+.?(X|x)+.?(I|i))' "${__isofname}"; then
        set __iibndist="esxi"

    # xcp-ng
    elif regexp '(X|x)+.?(C|c)+.?(P|p)+.*(N|n)+.?(G|g)' "${__isofname}"; then
        set __iibndist="xcpng"
    fi

    if [ -n "${2}" ]; then
        eval "set ${2}"'="${__iibndist}"'
    fi

    if [ -n "${__iibndist}" ]; then
        unset __iibndist
        true
        return
    else
        unset __iibndist
        false
        return
    fi
}



#iso_idl_<dist> "loopdev"
# Ubuntu
function iso_idl_ubuntu {
    if [ -s "(${1})/casper/"*vmlinuz* -a -s "(${1})/casper/"*initr* ]; then
        true
        return
    else
        false
        return
    fi
}
    
# CentOS
function iso_idl_centos {
    if [ -s "(${1})/isolinux/"*vmlinuz* -a -s "(${1})/isolinux/"*initr* ]; then
        true
        return
    else
        false
        return
    fi
}

# Fedora CoreOS
function iso_idl_fcos {
    if [ -s "(${1})/images/"*vmlinuz* -a -s "(${1})/images/"*initr*img ]; then
        true
        return
    else
        false
        return
    fi
}

# Fedora
function iso_idl_fedora {
    if [ -s "(${1})/isolinux/"*vmlinuz* -a -s "(${1})/isolinux/"*initr* ]; then
        true
        return
    else
        false
        return
    fi
}

# Debian
function iso_idl_debian {
    if [ -s "(${1})/live/"*vmlinuz* -a -s "(${1})/live/"*initr* ]; then
        true
        return
    else
        false
        return
    fi
}

# Alpine
function iso_idl_alpine {    
    if [ -s "(${1})/boot/"*vmlinuz* -a -s "(${1})/boot/"*initr* -a ( -d "(${1})/apks/" -o -s "(${1})/boot/"*modloop* -o -s "(${1})/.alpine-release" ) ]; then
        true
        return
    else
        false
        return
    fi
}

# Arch
function iso_idl_arch {   
    if [ -s "(${1})/arch/boot/x86_64/"*vmlinuz* -a -s "(${1})/arch/boot/x86_64/"*archiso* ]; then
        true
        return
    else
        false
        return
    fi
}

# ESXi
function iso_idl_esxi {  
    if [ -s "(${1})/"*vmware* ]; then
        true
        return
    else
        false
        return
    fi
}

# xcp-ng
function iso_idl_xcpng {    
    if [ -s "(${1})/boot/"*xen* -a -s "(${1})/boot/"*vmlinuz* -a -s "(${1})/"*install.img* ]; then
        true
        return
    else
        false
        return
    fi
}

## BOOT AS
#boot_iso_<dist> "loopdev" "iso filepath"
# Ubuntu
function boot_iso_ubuntu {
    unset __linux
    unset __initrd

    find_file_ptrn "(${1})/casper/*vmlinuz*" __linux
    find_file_ptrn "(${1})/casper/*initr*" __initrd

    if [ -z "${__linux}" -o -z "${__initrd}" ]; then
        echo "failed to find kernel and/or ramdisk"
        false
        return
    fi
    echo "kernel: ${__linux}"
    echo "ramdisk: ${__initrd}"

    unset __isopath
    unset __loopuuid
    get_path_wo_drv "${2}" __isopath
    probe -u -s __loopuuid "(${1})"

    #load and boot
    linux ${__linux} boot=casper iso-scan/filename=${__isopath} --
    initrd ${__initrd}
    boot
}
    
# CentOS
function boot_iso_centos {
    unset __linux
    unset __initrd

    find_file_ptrn "(${1})/isolinux/*vmlinuz*" __linux
    find_file_ptrn "(${1})/isolinux/*initr*" __initrd

    if [ -z "${__linux}" -o -z "${__initrd}" ]; then
        echo "failed to find kernel and/or ramdisk"
        false
        return
    fi
    echo "kernel: ${__linux}"
    echo "ramdisk: ${__initrd}"

    unset __isopath
    unset __loopuuid
    get_path_wo_drv "${2}" __isopath
    probe -u -s __loopuuid "(${1})"
    unset __isofname
    get_filename "${__isopath}" __isofname
    if regexp '\.iso$' "${__isofname}"; then
        regexp --set 1:__isofname '(.*)\.iso$' "${__isofname}"
    fi
    unset __isolabel
    iso_loop_label "${1}" __isolabel
    unset __isostore
    unset __isostoreuuid
    get_drive "${2}" __isostore
    probe -u -s __isostoreuuid "${__isostore}"

    echo "__isofname: ${__isofname}"
    echo "__isopath: ${__isopath}"
    echo "__isolabel: ${__isolabel}"
    echo "__loopuuid: ${__loopuuid}"
    echo "__isostoreuuid: ${__isostoreuuid}"
    echo "[ESC] to continue..."
    sleep -i 9999
    #load and boot
    linux ${__linux} iso-scan/filename=${__isopath} root=live:UUID=${__loopuuid} inst.stage2=hd:UUID=${__isostoreuuid}:/${__isopath} ro rd.live.image
    initrd ${__initrd}
    boot
}
    
# Fedora
function boot_iso_fedora {
    boot_iso_centos $@
    return
}

# Fedora CoreOS
function boot_iso_fcos {
    unset __linux
    unset __initrd

    find_file_ptrn "(${1})/images/*vmlinuz*" __linux
    find_file_ptrn "(${1})/images/*initr*" __initrd

    if [ -z "${__linux}" -o -z "${__initrd}" ]; then
        echo "failed to find kernel and/or ramdisk"
        false
        return
    fi
    echo "kernel: ${__linux}"
    echo "ramdisk: ${__initrd}"

    unset __isopath
    unset __loopuuid
    get_path_wo_drv "${2}" __isopath
    probe -u -s __loopuuid "(${1})"
    unset __isofname
    get_filename "${__isopath}" __isofname
    if regexp '\.iso$' "${__isofname}"; then
        regexp --set 1:__isofname '(.*)\.iso$' "${__isofname}"
    fi
    unset __isolabel
    iso_loop_label "${1}" __isolabel
    unset __isostore
    unset __isostoreuuid
    get_drive "${2}" __isostore
    probe -u -s __isostoreuuid "${__isostore}"

    echo "__isofname: ${__isofname}"
    echo "__isopath: ${__isopath}"
    echo "__isolabel: ${__isolabel}"
    echo "__loopuuid: ${__loopuuid}"
    echo "__isostoreuuid: ${__isostoreuuid}"
    echo "[ESC] to continue..."
    sleep -i 9999
    #load and boot
    # mitigations=auto,nosmt systemd.unified_cgroup_hierarchy=0 coreos.liveiso=fedora-coreos-31.20200310.3.0 rd.neednet=1 ip=dhcp ignition.firstboot ignition.platform.id=metal
    linux ${__linux} systemd.unified_cgroup_hierarchy=0 coreos.liveiso=${__isolabel} rd.neednet=1 ip=dhcp ignition.firstboot 
    initrd ${__initrd}
    boot
}


# Debian
function boot_iso_debian {
    unset __linux
    unset __initrd

    find_file_ptrn "(${1})/live/*vmlinuz*" __linux
    find_file_ptrn "(${1})/live/*initr*" __initrd

    if [ -z "${__linux}" -o -z "${__initrd}" ]; then
        echo "failed to find kernel and/or ramdisk"
        false
        return
    fi
    echo "kernel: ${__linux}"
    echo "ramdisk: ${__initrd}"

    unset __isopath
    unset __loopuuid
    get_path_wo_drv "${2}" __isopath
    probe -u -s __loopuuid "(${1})"

    #load and boot
    linux ${__linux} boot=live findiso=${__isopath}
    initrd ${__initrd}
    boot
}

# Alpine
function boot_iso_alpine {    
    unset __linux
    unset __initrd
    unset __modloop

    find_file_ptrn "(${1})/boot/*vmlinuz*" __linux
    find_file_ptrn "(${1})/boot/*initr*" __initrd
    find_file_ptrn "(${1})/boot/*modloop*" __modloop
    get_path_wo_drv "${__modloop}" __modloop

    if [ -z "${__linux}" -o -z "${__initrd}" -o -z "${__modloop}" ]; then
        echo "failed to find kernel and/or ramdisk"
        false
        return
    fi
    echo "kernel: ${__linux}"
    echo "ramdisk: ${__initrd}"
    echo "modloop: ${__modloop}"

    unset __isopath
    unset __loopuuid
    get_path_wo_drv "${2}" __isopath
    probe -u -s __loopuuid "(${1})"
    unset __isofname
    get_filename "${__isopath}" __isofname
    if regexp '\.iso$' "${__isofname}"; then
        regexp --set 1:__isofname '(.*)\.iso$' "${__isofname}"
    fi
    unset __isolabel
    iso_loop_label "${1}" __isolabel
    unset __isostore
    unset __isostoreuuid
    get_drive "${2}" __isostore
    probe -u -s __isostoreuuid "${__isostore}"

    echo "__isofname: ${__isofname}"
    echo "__isopath: ${__isopath}"
    echo "__isolabel: ${__isolabel}"
    echo "__loopuuid: ${__loopuuid}"
    echo "__isostoreuuid: ${__isostoreuuid}"
    echo "[ESC] to continue..."
    sleep -i 9999

    #load and boot
    linux ${__linux} iso-scan/filename=${__isopath} alpine_dev=UUID=${__isostoreuuid} modloop=${__modloop} modules=loop,squashfs,sd-mod,ext2,vfat,iso9660 console=tty0 console=ttyS0,115200
    initrd ${__initrd}
    boot
}

# Arch
function boot_iso_arch {   
    unset __linux
    unset __initrd

    find_file_ptrn "(${1})/arch/boot/x86_64/*vmlinuz*" __linux
    find_file_ptrn "(${1})/arch/boot/x86_64/*archiso*" __initrd
    find_file_ptrn "(${1})/arch/boot/*intel*.img" __codeintel
    find_file_ptrn "(${1})/arch/boot/*amd*.img" __codeamd

    if [ -z "${__linux}" -o -z "${__initrd}" ]; then
        echo "failed to find kernel and/or ramdisk"
        false
        return
    fi
    echo "kernel: ${__linux}"
    echo "ramdisk: ${__initrd}"
    echo "aux images: ${__codeintel} ${__codeamd}"

    unset __isopath
    unset __loopuuid
    get_path_wo_drv "${2}" __isopath
    probe -u -s __loopuuid "(${1})"
    unset __isofname
    get_filename "${__isopath}" __isofname
    if regexp '\.iso$' "${__isofname}"; then
        regexp --set 1:__isofname '(.*)\.iso$' "${__isofname}"
    fi
    unset __isolabel
    iso_loop_label "${1}" __isolabel
    unset __isostore
    unset __isostoreuuid
    get_drive "${2}" __isostore
    probe -u -s __isostoreuuid "${__isostore}"

    echo "__isofname: ${__isofname}"
    echo "__isopath: ${__isopath}"
    echo "__isolabel: ${__isolabel}"
    echo "__loopuuid: ${__loopuuid}"
    echo "__isostoreuuid: ${__isostoreuuid}"
    echo "[ESC] to continue..."
    sleep -i 9999
    #load and boot
    linux ${__linux} img_dev=/dev/disk/by-uuid/${__isostoreuuid} img_loop=/${__isopath} earlymodules=loop
    initrd ${__codeintel} ${__codeamd} ${__initrd}

    boot
}

# ESXi
function boot_iso_esxi {  
    linux (${1})/mboot.c32 -c boot.cfg
    boot
}

# # xcp-ng
# function boot_iso_xcpng {    
#     unset __linux
#     unset __instimg
#     unset __xenimg
    
#     for __xen_cd in "(${1})/boot/"*xen*; do

#     done
#     for __lin_cd in "(${1})/boot/"*vmlinuz*; do
#         if is_dot_file "${__lin_cd}"; then
#             continue
#         fi

#         set __linux="${__lin_cd}"
#         break
#     done
#     for __inst_cd in "(${1})/"*install.img*; do
    
    
#     done
# }

# iso_ltest_hint "dist name" "loopdev"
function iso_ltest_hint {

    if [ $# -ne 2 ]; then
        false
        return
    fi
    
    regexp --set 1:__ilhloopdev '\(?([^\(\)]*)\)?' "${2}"
    if [ ! -d "(${__ilhloopdev})" ]; then
        false
        return
    fi

    # Ubuntu
    if [ "${1}" == "ubuntu" ]; then
        if iso_idl_ubuntu "${__ilhloopdev}"; then
            unset __ilhloopdev
            true
            return
        else
            unset __ilhloopdev
            false
            return
        fi

    # CentOS
    elif [ "${1}" == "centos" ]; then
        if iso_idl_centos "${__ilhloopdev}"; then
            unset __ilhloopdev
            true
            return
        else
            unset __ilhloopdev
            false
            return
        fi

    # Debian
    elif [ "${1}" == "debian" ]; then
        if iso_idl_debian "${__ilhloopdev}"; then
            unset __ilhloopdev
            true
            return
        else
            unset __ilhloopdev
            false
            return
        fi

    # Fedora CoreOS
    elif [ "${1}" == "fcos" ]; then
        if iso_idl_fcos "${__ilhloopdev}"; then
            unset __ilhloopdev
            true
            return
        else
            unset __ilhloopdev
            false
            return
        fi

    # Fedora
    elif [ "${1}" == "fedora" ]; then
        if iso_idl_fedora "${__ilhloopdev}"; then
            unset __ilhloopdev
            true
            return
        else
            unset __ilhloopdev
            false
            return
        fi

    # Alpine
    elif [ "${1}" == "alpine" ]; then
        if iso_idl_alpine "${__ilhloopdev}"; then
            unset __ilhloopdev
            true
            return
        else
            unset __ilhloopdev
            false
            return
        fi

    # Arch
    elif [ "${1}" == "arch" ]; then
        if iso_idl_arch "${__ilhloopdev}"; then
            unset __ilhloopdev
            true
            return
        else
            unset __ilhloopdev
            false
            return
        fi

    # ESXi
    elif [ "${1}" == "esxi" ]; then
        if iso_idl_esxi "${__ilhloopdev}"; then
            unset __ilhloopdev
            true
            return
        else
            unset __ilhloopdev
            false
            return
        fi

    # xcp-ng
    elif [ "${1}" == "xcpng" ]; then
        if iso_idl_xcpng "${__ilhloopdev}"; then
            unset __ilhloopdev
            true
            return
        else
            unset __ilhloopdev
            false
            return
        fi
    fi

    false
    return
}

# iso_id_from_loop "loopdev" ["return variable name"]
function iso_id_from_loop {
    echo "iso id from loopdev"
    if [ $# -lt 1 ]; then
        false
        return
    fi

    regexp --set 1:__iiflloopdev '\(?([^\(\)]*)\)?' "${1}"
    if [ ! -d "(${__iiflloopdev})/" ]; then
        echo "loopback device (${__iiflloopdev}) not existent!"
        false
        return
    fi
    
    unset __iifldist
    # Ubuntu
    if iso_idl_ubuntu "${__iiflloopdev}"; then
        set __iifldist="ubuntu"
    # CentOS
    elif iso_idl_centos "${__iiflloopdev}"; then
        set __iifldist="centos"
    # Fedora CoreOS
    elif iso_idl_fcos "${__iiflloopdev}"; then
        set __iifldist="fcos"
    # Fedora
    elif iso_idl_fedora "${__iiflloopdev}"; then
        set __iifldist="fedora"
    # Debian
    elif iso_idl_debian "${__iiflloopdev}"; then
        set __iifldist="debian"
    # Alpine
    elif iso_idl_alpine "${__iiflloopdev}"; then
        set __iifldist="alpine"
    # Arch
    elif iso_idl_arch "${__iiflloopdev}"; then
        set __iifldist="arch"
    # ESXi
    elif iso_idl_esxi "${__iiflloopdev}"; then
        set __iifldist="esxi"
    # xcp-ng
    elif iso_idl_xcpng "${__iiflloopdev}"; then
        set __iifldist="xcpng"
    fi


    if [ -n "${2}"]; then
        eval "set ${2}"'="${__iifldist}"'
    fi

    if [ -n "${__iifldist}"]; then
        unset __iiflloopdev
        true
        return
    else
        unset __iiflloopdev
        false
        return
    fi
}

# identify_iso "isofile" "return variable name" ["loopdev"]
function identify_iso {
    if [ $# -lt 2 ]; then
        false
        return
    fi

    # create random loopback device if none specified
    unset __rndlpid
    if [ -z "${3}"]; then
      echo "creating temporary loopback device"
      randchr __rndlpid 4
      while [ -d "(loop-${__rndlpid})/"]; do
        sleep 1
        randchr __rndlpid 4
      done
      set __iiloopdev="loop-${__rndlpid}"
      echo "loading iso at loopback devive: ${__iiloopdev}"
      load_iso "${1}" "${__iiloopdev}"
    else
        regexp --set 1:__iiloopdev '\(?([^\(\)]*)\)?' "${3}"
    fi

    if [ ! -d "(${__iiloopdev})/" ]; then
        echo "loopback device (${__iiloopdev}) not existent!"
        false
        return
    fi

    # identify iso
    # test filename for hint
    unset __iso_name_hint
    unset __iso_type
    echo "identifiying iso by name..."
    if iso_id_by_name "${1}" __iso_name_hint; then
        # verify filename hint
        echo "identified ${__iso_name_hint} from name, verifying..."
        if iso_ltest_hint "${__iso_name_hint}" "${__iiloopdev}"; then
            echo "verified as ${__iso_name_hint}"
            set __iso_type="${__iso_name_hint}"
        fi
    fi


    # test all other options
    if [ -z "${__iso_type}" ]; then
        echo "iso not identified, trying from loopback device..."
        iso_id_from_loop "${__iiloopdev}" __iso_type
    fi

    # remove loopback device if created by us
    if [ -n "${__rndlpid}"]; then
        echo "removing temporary loopback device ${__iiloopdev}"
        loopback -d "${__iiloopdev}"
    fi

    unset __rndlpid
    unset __iiloopdev

    # return wether identified
    eval "set ${2}"'="${__iso_type}"'

    if [ -n "${__iso_type}" ]; then
        echo "identified as ${__iso_type}"
        unset __iso_type
        true
        return
    else
        echo "failed to identify"
        unset __iso_type
        false
        return
    fi
}

function boot_iso {
    if [ $# -ne 1 -o ! -s "${1}" ]; then
        false
        return
    fi

    unset __boot_as_dist
    identify_iso "${1}" __boot_as_dist

    if [ -z "${__boot_as_dist}" ]; then
        echo "could not identify iso type!"
        echo "[ESC] to continue"
        sleep -i 9999
        false
        return
    fi

    load_iso "${1}" loop
    eval "boot_iso_${__boot_as_dist} loop ${1}"
}
