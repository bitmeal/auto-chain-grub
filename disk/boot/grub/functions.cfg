# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
# 
# Copyright (C) 2020, Arne Wendt
#


# insmod regexp
# insmod datehook

function trim_spaces {
    eval 'set __list="$'"${1}"'"'
    regexp --set 1:__trimmed '^ *(.*) *$' "${__list}"
    eval "set ${1}="'"${__trimmed}"'
    unset __trimmed
    unset __list
}

# in_list "token" "list-variable-name"
# returns 0/1 as exit code
function in_list {
    if [ $# -ne 2 ]; then
        false
        return
    fi

    eval 'set __list="$'"${2}"'"'
    if regexp '(^| )'"${1}"'( |$)' "${__list}"; then
        unset __list
        true
        return
    else
        unset __list
        false
        return
    fi
}

# add_to_list "token/s" "list-variable-name"
function add_to_list {
    if [ $# -ne 2 ]; then
        false
        return
    fi

    eval 'set '"${2}"'="$'"${2}"' ${1}"'
    trim_spaces "${2}"
    return
}

function add_to_list_unq {
    if [ $# -ne 2 ]; then
        false
        return
    fi

    if in_list "${1}" "${2}"; then
        true
        return
    fi

    eval 'set '"${2}"'="$'"${2}"' ${1}"'
    trim_spaces "${2}"
    return
}

# remove_from_list "tokens" "list-variable-name"
function remove_from_list {
    if [ $# -ne 2 ]; then
        false
        return
    fi

    set __foundinlist=false
    for __token in ${1}; do
        if in_list "${__token}" "${2}"; then
            set __foundinlist=true
            break
        fi
    done
    unset __token

    if ! ${__foundinlist} ; then
        true
        unset __foundinlist
        return
    fi
    
    
    eval 'set __list="${'"${2}"'}"'
    set __returnlist=""

    for __listitem in ${__list}; do
        set __eqtoken=false
        for __token in ${1}; do
            if [ "${__token}" == "${__listitem}" ]; then
                set __eqtoken=true
                break
            fi
        done

        if ! ${__eqtoken} ; then
            add_to_list "${__listitem}" __returnlist
        fi
    done
    unset __eqtoken

    trim_spaces __returnlist
    eval "set ${2}"'="${__returnlist}"'

    unset __foundinlist
    unset __returnlist
    unset __listitem
    unset __list
    
    true
    return
}

# make_list_unique "list-variable-name"
function make_list_unique {
    if [ $# -ne 1 ]; then
        false
        return
    fi
    
    eval 'set __list="${'"${1}"'}"'
    set __returnlist=""

    for __listitem in ${__list}; do
        if ! in_list "${__listitem}" __returnlist; then
            add_to_list "${__listitem}" __returnlist
        fi
    done

    trim_spaces __returnlist
    eval "set ${1}"'="${__returnlist}"'

    unset __returnlist
    unset __listitem
    unset __list
    
    true
    return
}

# test_safe "var-name"
# tests for true or false; does not fail when not set
function test_safe {
  eval 'set __test=$'"${1}"''
  if [ -n "${__test}" ]; then
    if $__test; then
      true
      return
    fi
  fi

  false
  return
}

# run_if_var "varname" 'command if true' ['command if false']
function run_if_var {
    if [ $# -lt 2 ]; then
        false
        return
    fi

    if test_safe "${1}"; then
        eval "${2}"
    else
        if [ -n "${3}" ]; then
            eval "${3}"
        fi
    fi
}

# append_str_to "token" "string variable name" ["delimiter"]
function append_str_to {
    if [ $# -lt 2 ]; then
        false
        return
    fi

    eval 'set __str="${'"${2}"'}"'

    if [ -n "${__str}" -a -n "${1}" ]; then
        set __str="${__str}${3}"
    fi
    set __str="${__str}${1}"
    eval "set ${2}"'="${__str}"'

    unset __str

    true
    return
}

# escape_spaces "string variable name"
function escape_spaces {

    eval 'set __ssstr="${'"${1}"'}"'

    unset __escstr
    for __sspart in $__ssstr; do
        append_str_to "${__sspart}" __escstr "\\ "
    done
    eval "set ${1}"'="${__escstr}"'

    unset __sspart
    unset __ssstr
    unset __escstr

    true
    return
}

# random generator
# randchr "var-name" [lenght]
function randchr {
    if [ -z "${1}" ]; then
        false
        return
    fi

    set __rlen="${2}"
    if [ -z "${__rlen}" ]; then
        set __rlen="1"
    fi

    # is number
    if ! regexp '^[0-9]*$' "${__rlen}"; then
        false
        return
    fi

    # strip leading zeros
    regexp --set 1:__rlen '^0*([0-9]*)$' "${__rlen}"
    regexp --set 1:__rlenm '([0-9])$' "${__rlen}"
    unset __offset
    if regexp "${__rlenm}" '02468'; then set __offset="."; fi


    export __randstate
    #set __randdict="Xabcdefghijklmn0123456789abcdefghijklmn0123456789"
    # non periodic dict, each half includes "abcdefghijklmn0123456789"
    set __randdict="X4gan0ei8629m5b3fj17lkchd0ied1ga5k4726lbf89hnc3jm"

    if [ -z "${__randstate}" ]; then
        regexp --set 1:__randstate "^.{${HOUR}}(.)" "${__randdict}"
    fi

    set __randchars=""
    until regexp ".{${__rlen}}" "${__randchars}" ; do
        regexp --set 1:__sf '[0-9]?([0-9])[0-9]' "0$SECOND"
        regexp --set 1:__ss '[0-9]?([0-9])' "$SECOND"
        #regexp --set 1:__c "${__randstate}.{${__ss}}(.)" "${__randdict}"
        regexp --set 1:__randstate "${__randstate}${__offset}.{${__rlenm}}(.)" "${__randdict}"
        regexp --set 1:__randstate "(.).{${__sf}}${__randstate}" "${__randdict}"
        if [ $__sf -ne $__ss ]; then
            regexp --set 1:__randstate "${__randstate}.{${__ss}}(.)" "${__randdict}"
        fi

        set __randchars="${__randchars}${__randstate}"
    done

    eval "set ${1}="'"${__randchars}"'

    unset __randchars
    unset __randdict
    unset __rlenm
    unset __rlen
    unset __ss
    unset __c
}


function get_filename {
    unset ${2}
    regexp --set 1:${2} '([^/]*)[ ]*$' "${1}"
    return
}

function get_path_wo_drv {
    unset ${2}
    regexp --set 2:${2} '\((lvm/)?[^ /\)]*\)/(.*)$' "${1}"
    return
}

function get_drive {
    unset ${2}
    regexp --set 1:${2} '(\((lvm/)?[^ /\)]*\)).*$' "${1}"
    return
}

function is_dot_file {
    # get filename
    get_filename "${1}" __idffname
    
    regexp '^\..*$' "${__idffname}"
    return
}

function find_file_ptrn {
    unset __ffp_cd
    for __ffp_cd in ${1}; do
        if is_dot_file "${__ffp_cd}"; then
            continue
        fi

        set __ffp="${__ffp_cd}"
        break
    done

    eval "set ${2}"'="${__ffp}"'
    
    if [ -n "${__ffp}" ]; then
        unset __ffp
        true
        return
    else
        unset __ffp
        true
        return
    fi
}
