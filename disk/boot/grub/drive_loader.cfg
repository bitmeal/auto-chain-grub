# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
# 
# Copyright (C) 2020, Arne Wendt
#


# insmod regexp
# insmod chain

load_env
source ${root_dir}functions.cfg
source ${root_dir}probe_os.cfg

export __chain_drive
export __chain_title


# make_drives_list "list-variable-name"
function make_drives_list {
    set __driveslist=""
    for __part in (*); do
        if ! regexp '(hd0|fd[0-9]|lvm/)' "${__part}"; then
            regexp --set 1:__drive '\((.*),.*\)' "${__part}"
            add_to_list "${__drive}" __driveslist
            unset __drive
        fi
    done

    make_list_unique __driveslist
    eval "set ${1}"'="${__driveslist}"'

    unset __part
    unset __driveslist

    true
    return
}

# make_lvm_list "list-variable-name"
function make_lvm_list {
    set __lvmlist=""
    for __lvmvol in (*); do
        if regexp --set 1:__vol '\(lvm/(.*)\)' "${__lvmvol}"; then
            add_to_list "${__vol}" __lvmlist
        fi
        unset __vol
    done

    eval "set ${1}"'="${__lvmlist}"'
    unset __lvmvol
    unset __lvmlist

    true
    return
}


# get_valid_parts "disk-identifier" "list-variable-name"
function get_valid_parts {
    set __partlist=""
    for __part in (${1},*); do
        if [ -d ${__part} ]; then
            add_to_list "${__part}" __partlist
        fi
    done

    eval "set ${2}"'="${__partlist}"'

    unset __part
    unset __partlist

    true
    return
}

function scan_drives {
    make_drives_list __drives
    make_lvm_list __lvms

    menuentry "v------identified OSes------v" { echo "identified OSes" }
    # identified drives
    set __unknown_drives=""
    for __drive in ${__drives}; do
        echo "probing ${__drive} for OS"
        set __parts=""
        get_valid_parts "${__drive}" __parts

        set __os_hint=""
        for __part in ${__parts}; do
            set __part_os_hint=""
            probe_os "${__part}" __part_os_hint

            append_str_to "${__part_os_hint}" __os_hint " // "
        done

        # try lvm
        if [ -z "${__os_hint}" ]; then
            # get vg vom grubenv if present
            echo "testing lvm..."
            set __grubenv=""
            for __part in ${__parts}; do
                if find_grubenv ${__part} __grubenv; then
                    unset kernelopts
                    load_env -f "${__grubenv}"

                    # find/found potential lvm root
                    if regexp --set 2:__lvmroot 'root=/?([^ /]*/)*([^ /]*)' "${kernelopts}"; then
                        if regexp --set 1:__lvm "(${__lvmroot}[^ ]*)" "${__lvms}"; then
                            probe_os "(lvm/${__lvm})" __part_os_hint
                            append_str_to "${__part_os_hint}" __os_hint " // "
                        fi
                    fi
                fi
            done

            unset __lvmroot
            unset __lvm
            unset kernelopts
            unset saved_entry
            unset default_entry
            unset default
            load_env
        fi

        if [ -n "${__os_hint}" ]; then
            # make menuentry
            echo "identified: ${__os_hint}"
            menuentry "${__os_hint}" "${__drive}" {
                set __chain_drive="${2}"
                set __chain_title="${1}"
                export __wrapcfgfile
                set __wrapcfgfile="boot_drive.cfg"
                configfile "${root_dir}module_menu_wrapper.cfg"
            }
        else
            # add to __unknown_drives list
            echo "no OS found"
            add_to_list "${__drive}" __unknown_drives
        fi
    done
    unset __drive
    unset __lvms

    menuentry "v----possible candidates----v" { echo "possible candidates" }
    # candidate drives
    set __drives="${__unknown_drives}"
    unset __unknown_drives

    for __drive in ${__drives}; do
        echo "probing ${__drive} for bootloader"

        set __parts=""
        get_valid_parts "${__drive}" __parts

        set __os_hint=""
        set __candidate=false

        for __part in ${__parts}; do
            if boot_candidate "${__part}"; then
                set __candidate=true
                unset __part_os_hint
                probe -s __part_os_hint -l "${__part}"
                append_str_to "${__part_os_hint}" __os_hint " // "
            fi
        done

        if ${__candidate}; then
            echo "found bootloader"
            append_str_to "${__drive}" __os_hint " // "
            # make menuentry
            menuentry "${__os_hint}" "${__drive}" {
                set __chain_drive="${2}"
                set __chain_title="${1}"
                export __wrapcfgfile
                set __wrapcfgfile="boot_drive.cfg"
                configfile "${root_dir}module_menu_wrapper.cfg"
            }
        else
            echo "no bootloader found"
            # add to __unknown_drives list
            add_to_list "${__drive}" __unknown_drives
        fi
        
        unset __parts
        unset __os_hint
    done
    unset __drive

    menuentry "v------unknown drives-------v" { echo "unknown drives" }
    # non-candidate drives

    for __drive in ${__unknown_drives}; do
        # make menuentry
        menuentry "${__drive}" "${__drive}" {
            set __chain_drive="${2}"
            set __chain_title="${1}"
            export __wrapcfgfile
            set __wrapcfgfile="boot_drive.cfg"
            configfile "${root_dir}module_menu_wrapper.cfg"
        }
    done

    unset __drive
    unset __drives
    unset __unknown_drives

    true
    return
}

# show modules menu
function __module_menu {
    scan_drives

    # additional menu items
    source "${root_dir}common_menuitems.cfg"
}