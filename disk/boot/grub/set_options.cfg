# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
# 
# Copyright (C) 2020, Arne Wendt
#



# insmod loadenv

load_env
source ${root_dir}functions.cfg
source ${root_dir}keymap.cfg

# make_option "variable-name" "description" 'commandline on SET' 'commandline on UNSET' "cofigfile-to-load"
function __make_option {
  if [ $# -lt 2 ]; then
    false
    return
  fi

  
  set __enabled=" "
  if test_safe "${1}"; then
    set __enabled="x"
  fi

  menuentry "[${__enabled}] ${2}" "${1}" "${3}" "${4}" {
    if test_safe "${2}"; then
      eval "set ${2}=false"
      echo "running: ${4}"
      eval "${4}"
    else
      eval "set ${2}=true"
      echo "running: ${3}"
      eval "${3}"
    fi
      
    eval "save_env ${2}"
    load_env

    export __wrapcfgfile
    set __wrapcfgfile="set_options.cfg"
    configfile "${root_dir}module_menu_wrapper.cfg"
  }

  unset __enabled
}





function __load_cust_mods {
  # loader
  for __module in ${__mods}; do
    insmod "${__module}"
  done
}

function __cust_mod_option {
  # show menu entry and delete on selection
  menuentry "${1}" "${1}" {
    rmmod "${2}"
    remove_from_list "${2}" "__mods"
    save_env __mods
    load_env

    export __wrapcfgfile
    set __wrapcfgfile="set_options.cfg"
    configfile "${root_dir}module_menu_wrapper.cfg"
  }
}

function __add_cust_mod_opt {
  menuentry "+ add module" {
    unset __mymod
    if [ -n "${__km}" ]; then
      __disable_keymap
      clear
      echo "US-LAYOUT ONLY! (BACKSPACE IS RESPECTED BUT NOT RENDERED)"
    fi
  
    echo "module name?"
    read __mymod

    __enable_keymap

    if insmod "${__mymod}"; then
      add_to_list_unq "${__mymod}" __mods
      save_env __mods
      load_env
    else
      echo "inserting module failed (press [ESC])"
      sleep -i 9999
    fi

    unset __mymod

    export __wrapcfgfile
    set __wrapcfgfile="set_options.cfg"
    configfile "${root_dir}module_menu_wrapper.cfg"
  }
}

function __show_cust_mods {
  for __module in ${__mods}; do
    __cust_mod_option "${__module}"
  done
}

function __run_cust_cmds {
  # loader
  for __cmdvar in ${__cmds}; do
    eval '"${'"${__cmdvar}"'}"'
  done
}

function __custom_cmds_option {
  # show menu entry and delete on selection
  menuentry "${1}" "${2}" {
    remove_from_list "${2}" __cmds
    save_env __cmds
    eval "unset ${2}"
    eval "save_env ${2}"
    load_env

    export __wrapcfgfile
    set __wrapcfgfile="set_options.cfg"
    configfile "${root_dir}module_menu_wrapper.cfg"
  }
}

function __add_cust_cmd_opt {
  menuentry "+ add command" {
    unset __mycmd
    if [ -n "${__km}" ]; then
      terminal_input --remove at_keyboard
      terminal_input --append console
      clear
      echo "US-LAYOUT ONLY! (BACKSPACE IS RESPECTED BUT NOT RENDERED)"
    fi
  
    echo "command:"
    read __mycmd

    if [ -n "${__km}" ]; then
      terminal_input --append at_keyboard
      terminal_input --remove console
    fi

    if eval "${__mycmd}"; then
      
      echo "evaluate your commands output above [ESC] to continue"

      unset __mycmdvar
      randchr __mycmdvar 3
      while in_list "${__mycmdvar}" __cmds; do
        sleep 1
        randchr __mycmdvar 3
      done
      set __mycmdvar="__cc${__mycmdvar}"

      add_to_list_unq "${__mycmdvar}" __cmds
      eval "set ${__mycmdvar}="'"'"${__mycmd}"'"'
      eval "save_env ${__mycmdvar}"
      save_env __cmds
      load_env

    else
      echo "evaluating command failed (press [ESC])"
      sleep -i 9999
    fi

    unset __mycmd
    unset __mycmdvar

    export __wrapcfgfile
    set __wrapcfgfile="set_options.cfg"
    configfile "${root_dir}module_menu_wrapper.cfg"
  }

}

function __show_cust_cmds {
  load_env
  for __cmdvar in ${__cmds}; do
    unset __cmdline
    eval 'set __cmdline="${'"${__cmdvar}"'}"'
    __custom_cmds_option "${__cmdline}" "${__cmdvar}"
  done
}

# show modules menu
function __module_menu {
  # build menu
  __make_option "__pm" "load fs driver: msdos" 'insmod part_msdos' 'rmmod part_msdos'
  __make_option "__pg" "load fs driver: gpt" 'insmod part_gpt' 'rmmod part_gpt'
  __make_option "__pe" "load fs driver: EXT2/EXT3/EXT4" 'insmod ext2' 'rmmod ext2'
  __make_option "__pn" "load fs driver: NTFS" 'insmod ntfs' 'rmmod ntfs'
  __make_option "__px" "load fs driver: XFS" 'insmod xfs' 'rmmod xfs'
  __make_option "__pl" "load fs driver: LVM" 'insmod lvm' 'rmmod lvm; rmmod diskfilter'
  __make_option "__pa" "load fs driver: exFAT" 'insmod exfat' 'rmmod exfat'
  __make_option "__ph" "load fs driver: HFS+" 'insmod hfsplus' 'rmmod hfsplus'

  menuentry "------[custom modules]------" { echo "${1}" }
  __show_cust_mods
  __add_cust_mod_opt
  menuentry "------[custom commands]------" { echo "${1}" }
  __show_cust_cmds
  __add_cust_cmd_opt
  # additional menu items
  source "${root_dir}common_menuitems.cfg"
}

function __load_modules {
  run_if_var "__pg" 'insmod part_msdos'
  run_if_var "__pg" 'insmod part_gpt'
  run_if_var "__pe" 'insmod ext2'
  run_if_var "__pn" 'insmod ntfs'
  run_if_var "__px" 'insmod xfs'
  run_if_var "__pl" 'insmod lvm'
  run_if_var "__pa" 'insmod exfat'
  run_if_var "__ph" 'insmod hfsplus'
}

# read modules config from enivronmental variables and apply
function __apply_config {
  __load_modules
  __load_cust_mods
  __run_cust_cmds
  return
}

# store config to grubenv
function __store_config {
  # empty; done in menuitem
  return
}
