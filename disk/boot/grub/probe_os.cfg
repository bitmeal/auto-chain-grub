# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at https://mozilla.org/MPL/2.0/.
# 
# Copyright (C) 2020, Arne Wendt
#



# probe_os "partition" "return variable name"
function probe_os {
    if [ $# -ne 2 ]; then
        false
        return
    fi

    set __part="${1}"
    set __probe_hint=""

    #### esxi
    if [ -s "${__part}/s.v00" ]; then
        set __probe_hint="ESXi"
    fi


    #### XenServer
    if [ -d "${__part}/opt/xensource/" ]; then
        set __probe_hint="XenServer"
    fi

    #### Debian generic
    if [ -s "${__part}/etc/debian_version" ]; then
        set __probe_hint="Debian"
    fi

    #### Ubuntu
    if [ -s "${__part}/etc/apt/apt.conf.d/01-vendor-ubuntu" ]; then
        set __probe_hint="Ubuntu"
    fi

    #### Arch
    if [ -s "${__part}/etc/arch-release" ]; then
        set __probe_hint="Arch"
    fi

    #### CentOS
    if [ -s "${__part}/etc/centos-release" ]; then
        set __probe_hint="CentOS"
    fi

    #### xcp-ng
    if [ -d "${__part}/opt/xensource/" -a -s "${__part}/etc/centos-release" ]; then
        set __probe_hint="xcp-ng"
    fi



    #### Windows NT + (likely 7)
    if [ -s "${__part}/Windows/System32/ntoskrnl.exe" ]; then
        set __probe_hint="Windows 7/NT"
    fi

    #### Windows 8
    if [ -d "${__part}/Windows/ImmersiveControlPanel/" ]; then
        set __probe_hint="Windows 8"
    fi

    #### Windows 10
    # *could detect flavour in `/Windows/System32/Licenses/neutral/_Default/<flavour>/`*
    if [ -d "${__part}/Windows/SystemApps/" ]; then
        set __probe_hint="Windows 10"
    fi

    #### Windows Server
    if [ -d "${__part}/Windows/System32/Licenses/neutral/_Default/Server"* -o -d "${__part}/Windows/System32/Licenses/neutral/Eval/Server"* ]; then
        set __probe_hint="Windows Server"
    fi

    # get info from efi partition
    if [ -d "${__part}/efi" ]; then
        for __efidir in "${__part}/efi/"*; do
            unset __efihint
            if get_filename "${__efidir}" __efihint; then

            if [ "${__efihint}" == "boot" -o "${__efihint}" == "Boot" -o "${__efihint}" == "Microsoft" -o "${__efihint}" == "efi" -o "${__efihint}" == "EFI" ]; then
                continue
            fi

            append_str_to "[efi]" __probe_hint " "
            append_str_to "${__efihint}" __probe_hint "/"
            fi
        done
    fi

    # return info
    eval "set ${2}"'="${__probe_hint}"'
    unset __part

    if [ -n "${__probe_hint}" ]; then
        unset __probe_hint
        true
        return
    else
        unset __probe_hint
        false
        return
    fi
}

# is there some bootloader or kernel on a partition
function boot_candidate {
    set __part="${1}"

    if [ "${grub_platform}" == "efi" -a ( -d "${__part}/efi/boot/" -o -d "${__part}/efi/Boot/" ) ]; then
        true
        return
    fi

    __dir_hints="/boot/grub/ /grub/ /boot/grub2/ /grub2/ /boot/syslinux/ /syslinux/ /loader/ /Boot/ /Windows/System32/ /Windows/system32/ /windows/System32/ /windows/system32/"
    for __dir in ${__dir_hints}; do
        if [ -d "${__part}${__dir}" ]; then
            unset __part
            unset __dir_hints
            unset __dir

            true
            return
        fi
    done
    unset __dir_hints
    unset __dir

    for __hint in "${__part}"/*vmlinuz*; do
        if [ -s "${__hint}" ]; then
            unset __part
            unset __hint

            true
            return
        fi
    done
    unset __hint

    for __hint in "${__part}"/*initr*; do
        if [ -s "${__hint}" ]; then
            unset __part
            unset __hint

            true
            return
        fi
    done
    unset __hint
    unset __part

    false
    return
}

# find_grubenv "partition" "return variable name"
function find_grubenv {
    if [ $# -ne 2 ]; then
        false
        return
    fi

    set __part="${1}"

    if [ -s "${__part}/boot/grub/grubenv" ]; then
        set __fgrubenv="${__part}/boot/grub/grubenv"
    fi
    if [ -s "${__part}/grub/grubenv" ]; then
        set __fgrubenv="${__part}/grub/grubenv"
    fi
    if [ -s "${__part}/boot/grub2/grubenv" ]; then
        set __fgrubenv="${__part}/boot/grub2/grubenv"
    fi
    if [ -s "${__part}/grub2/grubenv" ]; then
        set __fgrubenv="${__part}/grub2/grubenv"
    fi

    eval "set ${2}"'="${__fgrubenv}"'
    unset __part

    if [ -n "${__fgrubenv}" ]; then
        unset __fgrubenv
        true
        return
    else
        unset __fgrubenv
        false
        return
    fi
}